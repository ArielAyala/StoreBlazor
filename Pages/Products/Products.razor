@page "/products"
@inject ILogger<Products> logger;
@inject IProductService _productService;
@inject NavigationManager _navigationManager
@inject IJSRuntime _iJsRuntine

<PageTitle>Products</PageTitle>

<TitleComponent Title="Products" />

<button class="btn btn-primary" @onclick="@(()=> _navigationManager.NavigateTo("/add-product"))">Add a product</button>
@if (products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width = "270" height="210">
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price?.ToString("C")</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))" ><span class="oi oi-trash"></span></button>
                </div> 
            </div>
        }
    </div>
}else 
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code
{
    public List<Product> products;

    protected override async Task OnInitializedAsync()
    {
        products = await GetProducts();
    }

    private async Task<List<Product>> GetProducts()
    {
        return await _productService.GetProducts();
    }

    private async Task DeleteProduct(Product product)
    {
        if (!await _iJsRuntine.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {product.Title}"))
            return;

        await _productService.DeleteProduct(product.Id);
        products = await GetProducts();
    }
}